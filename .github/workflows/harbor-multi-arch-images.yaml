name: Docker publish
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (optional)"
        required: false
  push:
    branches:
      - "master"
jobs:
  # docker-base-image:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       component:
  #         - trivy-adapter
  #         - core
  #         - db
  #         - exporter
  #         - jobservice
  #         - log
  #         - nginx
  #         - portal
  #         - prepare
  #         - redis
  #         - registry
  #         - registryctl

  #   defaults:
  #     run:
  #       working-directory: ./

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true

  #     - uses: docker/setup-qemu-action@v2
  #     - uses: docker/setup-buildx-action@v2
  #       with:
  #         driver: docker-container
  #         driver-opts: network=host
  #     - uses: docker/login-action@v2
  #       with:
  #         registry: minregi.k3.acornsoft.io
  #         username: admin
  #         password: Pass0000@

  #     - run: make patch

  #     - id: prepare
  #       run: echo "tag=$(cat ./version)"  >> $GITHUB_ENV

  #     - name: Check if component is db
  #       if: ${{ (matrix.component == 'db') }}
  #       run: |
  #         bash ./scripts/convert.sh ./harbor/make/photon/${{ matrix.component }}/Dockerfile.base
  #         cat ./harbor/make/photon/${{ matrix.component }}/Dockerfile.base

  #     - name: Build base image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./harbor
  #         file: ./harbor/make/photon/${{ matrix.component }}/Dockerfile.base
  #         platforms: linux/amd64,linux/arm64
  #         # labels: |
  #         #   org.opencontainers.image.source=https://github.com/${{ github.repository }}
  #         #   org.opencontainers.image.revision=${{ env.tag }}
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: minregi.k3.acornsoft.io/goharbor/harbor-${{ matrix.component }}-base:${{ env.tag }}

  # docker-image:
  #   needs:
  #     - docker-base-image

  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       component:
  #         - prepare
  #         - db
  #         - portal
  #         - core
  #         - jobservice
  #         - log
  #         - nginx
  #         - registryctl
  #         - trivy_adapter
  #         - redis
  #         - standalone_db_migrator
  #         - exporter

  #   defaults:
  #     run:
  #       working-directory: ./

  #   steps:
  #     - id: prepare
  #       run: echo "tag=$(cat ./version)"  >> $GITHUB_ENV
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true

  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: "^1.20.x"

  #     - uses: docker/setup-qemu-action@v2
  #     - uses: docker/setup-buildx-action@v2
  #       with:
  #         driver: docker-container
  #         driver-opts: network=host

  #     - run: make patch

  #     - uses: docker/login-action@v2
  #       with:
  #         registry: minregi.k3.acornsoft.io
  #         username: admin
  #         password: Pass0000@

  #     - id: versioning
  #       run: echo "tag=$(cat ./version)" >> $GITHUB_ENV

  #     - name: Check if component is db
  #       if: ${{ (matrix.component == 'db') }}
  #       run: |
  #         bash ./scripts/convert.sh ./harbor/make/photon/${{ matrix.component }}/Dockerfile.base
  #         cat ./harbor/make/photon/${{ matrix.component }}/Dockerfile.base

  #     - name: Build & Publish images
  #       env:
  #         IMAGENAMESPACE: minregi.k3.acornsoft.io/goharbor
  #         BASEIMAGENAMESPACE: minregi.k3.acornsoft.io/goharbor
  #         IMAGELABELS: org.opencontainers.image.source=https://minregi.k3.acornsoft.io/goharbor
  #         MULTIARCH: true
  #         TRIVYFLAG: true
  #         CHARTFLAG: true
  #         NOTARYFLAG: true
  #         PUSHBASEIMAGE: true
  #       run: |
  #         cd ./harbor;
  #         set -eux;

  #         CTX="BUILDBIN=true VERSIONTAG=${{ env.tag }} BASEIMAGETAG=${{ env.tag }}  MULTIARCH=${MULTIARCH} IMAGENAMESPACE=${IMAGENAMESPACE} BASEIMAGENAMESPACE=${BASEIMAGENAMESPACE} TRIVYFLAG=${TRIVYFLAG} CHARTFLAG=${CHARTFLAG} NOTARYFLAG=${CHARTFLAG} IMAGELABELS=${IMAGELABELS} PUSHBASEIMAGE=${PUSHBASEIMAGE}"

  #         make versions_prepare ${CTX};

  #         case ${{ matrix.component }} in
  #           core)                   make compile_core ${CTX} ;;
  #           jobservice)             make compile_jobservice ${CTX};;
  #           registryctl)            make compile_registryctl ${CTX};;
  #           standalone_db_migrator) make compile_standalone_db_migrator ${CTX} ;;
  #         esac;

  #         case ${{ matrix.component }} in
  #           exporter)    make build BUILDTARGET="_compile_and_build_exporter" ${CTX} ;;
  #           registryctl) make build BUILDTARGET="_build_registry _build_registryctl" ${CTX} ;;
  #           *)           make build BUILDTARGET="_build_${{ matrix.component }}" ${CTX} ;;
  #         esac;

  docker-package:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false

    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-go@v3
        with:
          go-version: "^1.20.x"

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          driver-opts: network=host

      - run: make patch

      - uses: docker/login-action@v2
        with:
          registry: minregi.k3.acornsoft.io
          username: admin
          password: Pass0000@

      - id: versioning
        run: echo "tag=$(cat ./version)" >> $GITHUB_ENV

      - name: Load remote Docker image
        run: |
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/nginx-photon:${{ env.tag }} 
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/redis-photon:${{ env.tag }}
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/harbor-log:${{ env.tag }}
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/harbor-exporter:${{ env.tag }}
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/trivy-adapter-photon:${{ env.tag }}
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/harbor-db:${{ env.tag }}
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/registry-photon:${{ env.tag }} 
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/prepare:${{ env.tag }}
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/harbor-jobservice:${{ env.tag }} 
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/harbor-registryctl:${{ env.tag }}
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/harbor-portal:${{ env.tag }}
          docker pull --platform=linux/arm64 minregi.k3.acornsoft.io/test/harbor-core:${{ env.tag }}

      - name: Changing the tag of the base image
        run: |
          docker tag minregi.k3.acornsoft.io/test/nginx-photon:${{ env.tag }} goharbor/nginx-photon${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/redis-photon:${{ env.tag }} goharbor/redis-photon:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/harbor-log:${{ env.tag }} goharbor/harbor-log:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/harbor-exporter:${{ env.tag }} goharbor/harbor-exporter:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/trivy-adapter-photon:${{ env.tag }} goharbor/trivy-adapter-photon:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/harbor-db:${{ env.tag }} goharbor/harbor-db:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/registry-photon:${{ env.tag }} goharbor/registry-photon:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/prepare:${{ env.tag }} goharbor/prepare:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/harbor-jobservice:${{ env.tag }} goharbor/harbor-jobservice:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/harbor-registryctl:${{ env.tag }} goharbor/harbor-registryctl:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/harbor-portal:${{ env.tag }} goharbor/harbor-portal:${{ env.tag }}
          docker tag minregi.k3.acornsoft.io/test/harbor-core:${{ env.tag }} goharbor/harbor-core:${{ env.tag }}

      - name: Docker packaging Offline installer
        run: |
          # Run the 'package_offline' command in ./harbor/Makefile
          cd ./harbor
          sed -i 's/package_offline: update_prepare_version compile build/package_offline: update_prepare_version/' Makefile
          sed -i 's/TRIVYFLAG=false/TRIVYFLAG=true/' Makefile
          sed -i '0,/VERSIONTAG=dev/s//VERSIONTAG=v2.7.4/' Makefile

          make package_offline

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.ISSAC_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Disable host key checking
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Send the output file to the certain server
        run: |
          scp -i ~/.ssh/id_rsa ./harbor/harbor-offline-installer-* ubuntu@3.36.98.17:/home/ubuntu/
